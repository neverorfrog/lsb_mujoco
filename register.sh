#!/bin/sh

# =========================================
# WARNING: This file is automatically generated.
# Do NOT edit manually.
# =========================================

set -eu
[ "${DEBUG_TRACE:-0}" = "1" ] && set -x

# ========= Limits / constants =========
MAX_USER_LEN=15

# ========= Config (env-overridable) ⚙️ =========
BACKEND_HOST="151.100.59.69"
BACKEND_PORT="51800"
BASE_URL="http://${BACKEND_HOST}:${BACKEND_PORT}"

API_TOKEN="supersecuretoken"

LAB_USERNAME="lab_6"

WG_CONF_NAME="wg0" 
WG_DIR="/etc/wireguard"
WG_CONF="${WG_DIR}/${WG_CONF_NAME}.conf"
MAX_TRIES="3"

# Print controls (1=print preview of fetched config; DEBUG_PRINT_RAW=1 prints unredacted)
PRINT_CONFIG="1"
DEBUG_PRINT_RAW="0"

# ========= Logging helpers (to stderr) 🪵 =========
green() { printf "\033[1;32m%s\033[0m\n" "$*" >&2; }
red()   { printf "\033[1;31m%s\033[0m\n" "$*" >&2; }
yellow(){ printf "\033[1;33m%s\033[0m\n" "$*" >&2; }
blue()  { printf "\033[1;34m%s\033[0m\n" "$*" >&2; }


# ========= Helpers 🧰 =========
need_root() {
  if [ "$(id -u)" -ne 0 ]; then
    red "⛔ Needs root. Try: sudo $0"
    exit 1
  fi
}

has_cmd() { command -v "$1" >/dev/null 2>&1; }

install_conf() {
  src="$1"
  umask 177
  mkdir -p "$WG_DIR"
  cp "$src" "$WG_CONF"
  green "📝 Saved config to ${WG_CONF} ✅"
}

validate_conf_file() {
  file="$1"
  [ -s "$file" ] || { red "⚠️ Empty config file"; return 1; }
  grep -q '^[[:space:]]*\[Interface\]'             "$file" || { red "⚠️ Missing [Interface] section"; return 1; }
  grep -q '^[[:space:]]*PrivateKey[[:space:]]*='   "$file" || { red "⚠️ Missing PrivateKey= line";   return 1; }
  grep -q '^[[:space:]]*\[Peer\]'                  "$file" || { red "⚠️ Missing [Peer] section";      return 1; }
  return 0
}

print_config_preview() {
  file="$1"
  size=$(wc -c < "$file" | tr -d ' ')
  yellow "📦 Received ${size} byte(s)"
  [ "$PRINT_CONFIG" = "1" ] || return 0

  if [ "$DEBUG_PRINT_RAW" = "1" ]; then
    blue "📄 Content (RAW, first 200 lines):"
    head -n 200 "$file" >&2
  else
    blue "📄 Content (redacted keys, first 200 lines):"
    awk '
      /^[[:space:]]*PrivateKey[[:space:]]*=/  { sub(/=.*/,"= (REDACTED)") }
      /^[[:space:]]*PresharedKey[[:space:]]*=/ { sub(/=.*/,"= (REDACTED)") }
      NR<=200 { print }
    ' "$file" >&2
  fi
}

curl_to_file() {
  method="$1"; url="$2"; out="$3"; shift 3
  if [ -n "$API_TOKEN" ]; then
    curl -fsS -X "$method" -H "Accept: application/octet-stream" \
         -H "Authorization: Bearer $API_TOKEN" -o "$out" "$url" "$@"
  else
    curl -fsS -X "$method" -H "Accept: application/octet-stream" \
         -o "$out" "$url" "$@"
  fi
}

fetch_regenerated_config() {
  blue "🔁 Regenerate for '${LAB_USERNAME}' → ${BASE_URL}/vpn/config/${LAB_USERNAME}"
  tmp="$(mktemp)"
  if curl_to_file GET "${BASE_URL}/vpn/config/${LAB_USERNAME}" "$tmp"; then
    print_config_preview "$tmp"
    if validate_conf_file "$tmp"; then install_conf "$tmp"; rm -f "$tmp"; return 0; fi
    red "⚠️ Regenerate returned invalid content."
  else
    red "❌ Regenerate request failed (curl)."
  fi
  rm -f "$tmp"
  return 1
}

bring_up() {
  blue "⬆️  wg-quick up ${WG_CONF_NAME}…"
  wg-quick up "${WG_CONF_NAME}"
  green "🔐 Tunnel is up!"
}

bring_down_silent() { wg-quick down "${WG_CONF_NAME}" >/dev/null 2>&1 || true; }

extract_master_target() {
  if [ -f "$WG_CONF" ]; then
    host=$(awk -F'[ =:]' '/^Endpoint[ \t]*=/{print $3; exit}' "$WG_CONF")
    if [ -n "$host" ]; then printf %s "$host"; return; fi
  fi
  printf %s "10.128.0.1"
}

test_ping() {
  target="$1"
  blue "📡 Pinging master ${target}…"
  if ping -c 2 -W 2 "$target" >/dev/null 2>&1; then
    green "✅ Ping OK!"; return 0
  else
    red "❌ Ping failed."; return 1
  fi
}

failure() {
  yellow "🧨 Nothing worked — Emergency stop…"
  red "💥 Emergency stop complete."
}

# ========= Main flow 🚀 =========
need_root
has_cmd wg-quick || { red "⛔ wg-quick not found."; exit 1; }
has_cmd curl     || { red "⛔ curl not found."; exit 1; }

yellow "👤 Using VPN username: ${LAB_USERNAME} (len=$(printf %s "$LAB_USERNAME" | wc -c | tr -d ' '))"
yellow "🖨️ PRINT_CONFIG=${PRINT_CONFIG}  DEBUG_PRINT_RAW=${DEBUG_PRINT_RAW}"
green  "🧪 Lab VPN bootstrap starting…"
yellow "🔧 Backend: ${BASE_URL}   Config: ${WG_CONF}"

if [ -f "$WG_CONF" ]; then
  yellow "📂 Found existing config at ${WG_CONF} — using it."
else
  yellow "🔍 No config found — trying to obtain one…"
  if ! fetch_regenerated_config; then
    red "🥴 Regenerate failed."
    failure
    exit 2
  fi
fi

bring_down_silent
if ! bring_up; then
  red "💥 wg-quick up failed on first try; will attempt re-provisioning…"
fi

target="$(extract_master_target)"
attempt=0
while [ "$attempt" -le "$MAX_TRIES" ]; do
  if test_ping "$target"; then
    green "✅ Service registration finished."
    green "🏁 All done!"
    exit 0
  fi
  attempt=$(( attempt + 1 ))
  if [ "$attempt" -gt "$MAX_TRIES" ]; then
    break
  fi
  yellow "🔄 Attempt ${attempt}/${MAX_TRIES}: requesting fresh profile (regenerate)…"
  bring_down_silent
  if fetch_regenerated_config && bring_up; then
    target="$(extract_master_target)"
    continue
  fi
  red "⚠️ Regenerate failed — trying to CREATE lab peer anew…"
  if fetch_create_lab_peer && bring_up; then
    target="$(extract_master_target)"
    continue
  fi
done

red "🛑 All attempts exhausted and ping still failing."
failure
exit 3